import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:smartbiztracker_new/utils/style_system.dart';
import 'package:smartbiztracker_new/utils/uuid_validator.dart';
import 'package:smartbiztracker_new/widgets/forms/error_report_form.dart';
import 'package:smartbiztracker_new/widgets/forms/product_return_form.dart';
import 'package:smartbiztracker_new/screens/feedback/error_history_screen.dart';
import 'package:smartbiztracker_new/providers/supabase_provider.dart';
import 'package:smartbiztracker_new/providers/notification_provider.dart';
import 'package:smartbiztracker_new/services/error_reports_service.dart';
import 'package:smartbiztracker_new/services/product_returns_service.dart';
import 'package:smartbiztracker_new/services/real_notification_service.dart';
import 'package:smartbiztracker_new/models/error_report_model.dart';
import 'package:smartbiztracker_new/models/product_return_model.dart';
import 'package:flutter_animate/flutter_animate.dart';

class CustomerServiceScreen extends StatefulWidget {
  
  const CustomerServiceScreen({
    super.key, 
    this.initialTabIndex = 0
  });
  final int initialTabIndex;

  @override
  State<CustomerServiceScreen> createState() => _CustomerServiceScreenState();
}

class _CustomerServiceScreenState extends State<CustomerServiceScreen> with SingleTickerProviderStateMixin {
  late TabController _tabController;
  bool _isSubmitting = false;
  bool _showSuccess = false;
  String _successMessage = '';

  final ErrorReportsService _errorReportsService = ErrorReportsService();
  final ProductReturnsService _returnsService = ProductReturnsService();
  final RealNotificationService _notificationService = RealNotificationService();
  
  @override
  void initState() {
    super.initState();
    _tabController = TabController(
      length: 2, 
      vsync: this,
      initialIndex: widget.initialTabIndex,
    );
    _tabController.addListener(_handleTabChange);
  }
  
  @override
  void dispose() {
    _tabController.removeListener(_handleTabChange);
    _tabController.dispose();
    super.dispose();
  }
  
  void _handleTabChange() {
    if (_showSuccess) {
      setState(() {
        _showSuccess = false;
      });
    }
  }
  
  // Handle error report submission
  Future<void> _handleErrorReportSubmit(Map<String, dynamic> errorReport) async {
    setState(() {
      _isSubmitting = true;
    });

    try {
      final supabaseProvider = Provider.of<SupabaseProvider>(context, listen: false);
      final user = supabaseProvider.user;

      if (user == null) {
        throw Exception('المستخدم غير مسجل الدخول');
      }

      // Validate user ID is a proper UUID
      UuidValidator.validateCustomerId(user.id);

      // Create ErrorReport object
      final report = ErrorReport(
        id: '', // Will be generated by Supabase
        customerId: user.id,
        customerName: user.name ?? user.email ?? 'مستخدم غير معروف',
        title: (errorReport['title'] as String?) ?? '',
        description: (errorReport['description'] as String?) ?? '',
        location: (errorReport['location'] as String?) ?? '',
        priority: (errorReport['priority'] as String?) ?? 'medium',
        status: 'pending',
        screenshotUrl: errorReport['screenshot'] as String?, // Handle file upload if needed
        createdAt: DateTime.now(),
      );

      // Save to database
      final createdReport = await _errorReportsService.createErrorReport(report);

      // Send notification to admins
      try {
        await _notificationService.createNotificationsForRoles(
          roles: ['admin', 'owner'],
          title: 'تقرير خطأ جديد',
          body: 'تم استلام تقرير خطأ جديد من ${report.customerName}: ${report.title}',
          type: RealNotificationService.typeCustomerServiceRequest,
          category: RealNotificationService.categoryCustomerService,
          priority: report.priority == 'high' ? RealNotificationService.priorityHigh : RealNotificationService.priorityNormal,
          route: '/admin/customer-service',
          referenceId: createdReport.id,
          referenceType: 'error_report',
          metadata: {
            'customer_id': report.customerId,
            'customer_name': report.customerName,
            'report_title': report.title,
            'priority': report.priority,
          },
        );
      } catch (notificationError) {
        // Log notification error but don't fail the main operation
        print('Failed to send notification: $notificationError');
      }

      // Show success message
      setState(() {
        _isSubmitting = false;
        _showSuccess = true;
        _successMessage = 'تم إرسال بلاغ الخطأ بنجاح! سنتواصل معك قريباً.';
      });

    } catch (e) {
      setState(() {
        _isSubmitting = false;
      });

      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('فشل في إرسال التقرير: $e'),
          backgroundColor: Colors.red,
          behavior: SnackBarBehavior.floating,
        ),
      );
    }
  }
  
  // Handle product return submission
  Future<void> _handleReturnSubmit(Map<String, dynamic> returnData) async {
    setState(() {
      _isSubmitting = true;
    });

    try {
      final supabaseProvider = Provider.of<SupabaseProvider>(context, listen: false);
      final user = supabaseProvider.user;

      if (user == null) {
        throw Exception('المستخدم غير مسجل الدخول');
      }

      // Validate user ID is a proper UUID
      UuidValidator.validateCustomerId(user.id);

      // Create ProductReturn object
      final productReturn = ProductReturn(
        id: '', // Will be generated by Supabase
        customerId: user.id,
        customerName: user.name ?? user.email ?? 'مستخدم غير معروف',
        productName: (returnData['product_name'] as String?) ?? '',
        orderNumber: (returnData['order_number'] as String?) ?? '',
        reason: (returnData['reason'] as String?) ?? '',
        status: 'pending',
        phone: returnData['phone'] as String?,
        datePurchased: returnData['date_purchased'] != null && returnData['date_purchased'].toString().isNotEmpty
            ? DateTime.tryParse(returnData['date_purchased'].toString())
            : null,
        hasReceipt: (returnData['has_receipt'] as bool?) ?? false,
        termsAccepted: (returnData['terms_accepted'] as bool?) ?? false,
        productImages: [], // Handle image upload if needed
        createdAt: DateTime.now(),
      );

      // Save to database
      final createdReturn = await _returnsService.createProductReturn(productReturn);

      // Send notification to admins
      try {
        await _notificationService.createNotificationsForRoles(
          roles: ['admin', 'owner'],
          title: 'طلب إرجاع منتج جديد',
          body: 'تم استلام طلب إرجاع جديد من ${productReturn.customerName} للمنتج: ${productReturn.productName}',
          type: RealNotificationService.typeCustomerServiceRequest,
          category: RealNotificationService.categoryCustomerService,
          priority: RealNotificationService.priorityNormal,
          route: '/admin/customer-service',
          referenceId: createdReturn.id,
          referenceType: 'product_return',
          metadata: {
            'customer_id': productReturn.customerId,
            'customer_name': productReturn.customerName,
            'product_name': productReturn.productName,
            'order_number': productReturn.orderNumber,
          },
        );
      } catch (notificationError) {
        // Log notification error but don't fail the main operation
        print('Failed to send notification: $notificationError');
      }

      // Show success message
      setState(() {
        _isSubmitting = false;
        _showSuccess = true;
        _successMessage = 'تم إرسال طلب الإرجاع بنجاح! سنراجع طلبك ونتواصل معك خلال 24 ساعة.';
      });

    } catch (e) {
      setState(() {
        _isSubmitting = false;
      });

      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('فشل في إرسال طلب الإرجاع: $e'),
          backgroundColor: Colors.red,
          behavior: SnackBarBehavior.floating,
        ),
      );
    }
  }
  
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: StyleSystem.backgroundDark,
      appBar: AppBar(
        title: const Text('خدمة العملاء'),
        centerTitle: true,
        elevation: 0,
        backgroundColor: StyleSystem.surfaceDark,
        foregroundColor: Colors.white,
        bottom: TabBar(
          controller: _tabController,
          indicatorColor: StyleSystem.primaryColor,
          labelColor: StyleSystem.primaryColor,
          unselectedLabelColor: Colors.white.withOpacity(0.6),
          labelStyle: const TextStyle(fontWeight: FontWeight.bold),
          tabs: const [
            Tab(
              icon: Icon(Icons.report_problem_outlined),
              text: 'الإبلاغ عن خطأ',
            ),
            Tab(
              icon: Icon(Icons.swap_horiz_outlined),
              text: 'طلب إرجاع منتج',
            ),
          ],
        ),
      ),
      body: Stack(
        children: [
          // Background
          Container(
            width: double.infinity,
            height: double.infinity,
            decoration: BoxDecoration(
              gradient: LinearGradient(
                begin: Alignment.topLeft,
                end: Alignment.bottomRight,
                colors: [
                  StyleSystem.backgroundDark,
                  StyleSystem.surfaceDark.withOpacity(0.8),
                ],
              ),
            ),
          ),
          
          // Content
          SafeArea(
            child: TabBarView(
              controller: _tabController,
              children: [
                // Error Report Tab
                _buildErrorReportTab(),
                
                // Product Return Tab
                _buildReturnTab(),
              ],
            ),
          ),
          
          // Success Overlay
          if (_showSuccess)
            _buildSuccessOverlay(),
        ],
      ),
    );
  }
  
  Widget _buildErrorReportTab() {
    return SingleChildScrollView(
      padding: const EdgeInsets.all(16.0),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // Page header
          const Text(
            'الإبلاغ عن خطأ',
            style: TextStyle(
              fontSize: 24,
              fontWeight: FontWeight.bold,
              color: Colors.white,
            ),
          ).animate().fadeIn(duration: 400.ms).moveY(begin: -10, end: 0),

          const SizedBox(height: 8),

          Text(
            'ساعدنا في تحسين خدماتنا من خلال الإبلاغ عن أي أخطاء تواجهها',
            style: TextStyle(
              fontSize: 14,
              color: Colors.white.withOpacity(0.7),
            ),
          ).animate().fadeIn(duration: 400.ms, delay: 100.ms).moveY(begin: -10, end: 0),
          
          const SizedBox(height: 24),
          
          // Error Report Form
          ErrorReportForm(
            onSubmit: _handleErrorReportSubmit,
            isLoading: _isSubmitting,
          ),

          const SizedBox(height: 24),

          // زر عرض تاريخ الأخطاء
          Container(
            width: double.infinity,
            decoration: BoxDecoration(
              gradient: LinearGradient(
                colors: [
                  Colors.black.withOpacity(0.8),
                  Colors.black.withOpacity(0.9),
                ],
                begin: Alignment.topLeft,
                end: Alignment.bottomRight,
              ),
              borderRadius: BorderRadius.circular(16),
              boxShadow: [
                BoxShadow(
                  color: const Color(0xFF10B981).withOpacity(0.3),
                  blurRadius: 15,
                  offset: const Offset(0, 5),
                ),
                BoxShadow(
                  color: Colors.black.withOpacity(0.1),
                  blurRadius: 10,
                  offset: const Offset(0, 2),
                ),
              ],
              border: Border.all(
                color: const Color(0xFF10B981).withOpacity(0.3),
                width: 1.5,
              ),
            ),
            child: Material(
              color: Colors.transparent,
              child: InkWell(
                onTap: () {
                  Navigator.push(
                    context,
                    MaterialPageRoute(
                      builder: (context) => const ErrorHistoryScreen(),
                    ),
                  );
                },
                borderRadius: BorderRadius.circular(16),
                child: Padding(
                  padding: const EdgeInsets.all(20),
                  child: Row(
                    children: [
                      Container(
                        padding: const EdgeInsets.all(12),
                        decoration: BoxDecoration(
                          gradient: LinearGradient(
                            colors: [
                              const Color(0xFF10B981),
                              const Color(0xFF10B981).withOpacity(0.8),
                            ],
                          ),
                          borderRadius: BorderRadius.circular(12),
                          boxShadow: [
                            BoxShadow(
                              color: const Color(0xFF10B981).withOpacity(0.4),
                              blurRadius: 8,
                              offset: const Offset(0, 4),
                            ),
                          ],
                        ),
                        child: const Icon(
                          Icons.history_rounded,
                          color: Colors.white,
                          size: 24,
                        ),
                      ),
                      const SizedBox(width: 16),
                      Expanded(
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            const Text(
                              'عرض تاريخ الأخطاء',
                              style: TextStyle(
                                color: Colors.white,
                                fontSize: 18,
                                fontWeight: FontWeight.bold,
                                fontFamily: 'Cairo',
                              ),
                            ),
                            const SizedBox(height: 4),
                            Text(
                              'مراجعة جميع الأخطاء المبلغ عنها سابقاً',
                              style: TextStyle(
                                color: Colors.white.withOpacity(0.7),
                                fontSize: 14,
                                fontFamily: 'Cairo',
                              ),
                            ),
                          ],
                        ),
                      ),
                      const Icon(
                        Icons.arrow_forward_ios_rounded,
                        color: Color(0xFF10B981),
                        size: 20,
                      ),
                    ],
                  ),
                ),
              ),
            ),
          ).animate().fadeIn(duration: 400.ms, delay: 200.ms).moveY(begin: 20, end: 0),

          const SizedBox(height: 40),
        ],
      ),
    );
  }
  
  Widget _buildReturnTab() {
    return SingleChildScrollView(
      padding: const EdgeInsets.all(16.0),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // Page header
          const Text(
            'طلب إرجاع منتج',
            style: TextStyle(
              fontSize: 24,
              fontWeight: FontWeight.bold,
              color: Colors.white,
            ),
          ).animate().fadeIn(duration: 400.ms).moveY(begin: -10, end: 0),

          const SizedBox(height: 8),

          Text(
            'تقديم طلب إرجاع للمنتجات التي لا تلبي توقعاتك أو بها عيوب',
            style: TextStyle(
              fontSize: 14,
              color: Colors.white.withOpacity(0.7),
            ),
          ).animate().fadeIn(duration: 400.ms, delay: 100.ms).moveY(begin: -10, end: 0),
          
          const SizedBox(height: 24),
          
          // Return Form
          ProductReturnForm(
            onSubmit: _handleReturnSubmit,
            isLoading: _isSubmitting,
          ),
          
          const SizedBox(height: 40),
        ],
      ),
    );
  }
  
  Widget _buildSuccessOverlay() {
    return Positioned.fill(
      child: Container(
        color: Colors.black54,
        child: Center(
          child: Container(
            width: 300,
            padding: const EdgeInsets.all(24),
            decoration: BoxDecoration(
              color: Colors.white,
              borderRadius: BorderRadius.circular(16),
              boxShadow: StyleSystem.shadowLarge,
            ),
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                Container(
                  width: 80,
                  height: 80,
                  decoration: BoxDecoration(
                    color: StyleSystem.successColor.withOpacity(0.2),
                    shape: BoxShape.circle,
                  ),
                  child: const Icon(
                    Icons.check_circle,
                    size: 60,
                    color: StyleSystem.successColor,
                  ),
                ).animate().scaleXY(begin: 0.5, end: 1.0, duration: 500.ms, curve: Curves.elasticOut),
                
                const SizedBox(height: 24),
                
                Text(
                  'تم الإرسال بنجاح!',
                  style: TextStyle(
                    fontSize: 22,
                    fontWeight: FontWeight.bold,
                    color: StyleSystem.primaryColor,
                  ),
                ).animate().fadeIn(delay: 300.ms),
                
                const SizedBox(height: 16),
                
                Text(
                  _successMessage,
                  textAlign: TextAlign.center,
                  style: const TextStyle(
                    fontSize: 14,
                    color: Colors.grey,
                  ),
                ).animate().fadeIn(delay: 400.ms),
                
                const SizedBox(height: 24),
                
                ElevatedButton(
                  onPressed: () {
                    setState(() {
                      _showSuccess = false;
                    });
                  },
                  style: ElevatedButton.styleFrom(
                    backgroundColor: StyleSystem.primaryColor,
                    foregroundColor: Colors.white,
                    padding: const EdgeInsets.symmetric(horizontal: 40, vertical: 12),
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(30),
                    ),
                  ),
                  child: const Text('حسناً'),
                ).animate().fadeIn(delay: 500.ms).moveY(begin: 20, end: 0)
              ],
            ),
          ),
        ),
      ).animate().fadeIn(duration: 300.ms),
    );
  }
} 